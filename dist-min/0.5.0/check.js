const e=new CSSStyleSheet;e.replaceSync(':host {\n    display: inline-block;\n    height: 1rem;\n    aspect-ratio: 1;\n    border-radius: var(--he-check-radius, 0.2rem);\n    cursor: pointer;\n    background-color: whitesmoke;\n    border: 0.1rem solid grey;\n}\n\n.container {\n    display: block;\n    width: 100%;\n    height: 100%;\n    cursor: pointer;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n.checkmark {\n    height: 100%;\n    width: 100%;\n    background-color: inherit;\n    border-radius: inherit;\n}\n\n:host(:hover) .checkmark {\n    background-color: var(--he-check-clr-hover, white);\n}\n\n:host(:state(checked)) .checkmark {\n    background-color: var(--he-check-clr-checked, grey);\n}\n\n:host(:state(checked)) .checkmark:after {\n    display: block;\n}\n\n:host(:state(checked):state(indeterminate)) .checkmark:after {\n    display: block;\n    -webkit-transform: translate(42%, 160%);\n    -ms-transform: translate(42%, 160%);\n    transform: translate(42%, 160%);\n    height: 0;\n    width: 30%;\n}\n\n.checkmark:after {\n    content: "";\n    display: none;\n    height: 50%;\n    aspect-ratio: 0.3;\n    border: solid var(--he-check-clr-checkmark, white);\n    border-width: 0 4px 4px 0;\n    -webkit-transform: translate(var(--he-check-left-shift, 90%), var(--he-check-top-shift, 10%)) rotate(45deg);\n    -ms-transform: translate(var(--he-check-left-shift, 90%), var(--he-check-top-shift, 10%)) rotate(45deg);\n    transform: translate(var(--he-check-left-shift, 90%), var(--he-check-top-shift, 10%)) rotate(45deg);\n} \n');class t extends HTMLElement{static formAssociated=!0;static observedAttributes=["name","indeterminate"];$mark;$internals;constructor(){super();let t=this.attachShadow({mode:"open"}),n=document.createElement("div");n.classList.add("container"),n.innerHTML=this.innerHTML,this.innerHTML="",this.$mark=document.createElement("div"),this.$mark.classList.add("checkmark"),n.append(this.$mark),t.append(n),t.adoptedStyleSheets=[e],this.$internals=this.attachInternals()}connectedCallback(){this.addEventListener("click",(()=>this.toggle()))}set checked(e){e?(this.setAttribute("checked",!0),this.$internals.states.add("checked"),this.$internals.setFormValue("on","checked")):(this.removeAttribute("checked"),this.$internals.states.delete("checked"),this.$internals.setFormValue(null))}get checked(){return this.$internals.states.has("checked")}set name(e){this.setAttribute("name",e)}get name(){return this.getAttribute("name")}set indeterminate(e){e?this.$internals.states.add("indeterminate"):this.$internals.states.delete("indeterminate")}get indeterminate(){return this.$internals.states.has("indeterminate")}attributeChangedCallback(e,t,n){if("indeterminate"===e)this.indeterminate=null!=n&&"false"!==n}toggle(){if(this.checked=!this.checked,this.onchange){const e=new InputEvent("click");this.onchange(e)}}}customElements.get("he-check")||customElements.define("he-check",t);export{t as HeliumCheck};
