const t=new CSSStyleSheet;t.replaceSync(':host {\n    display: inline-flex;\n    position: relative;\n    border-radius: 3px;\n    background-color: whitesmoke;\n    width: 100%;\n    height: 1.6rem;\n    font-size: 14px;\n    border: 0.1rem solid lightgrey;\n}\n\n:host(:hover), :host(:focus) {\n    border-color: var(--he-input-clr-border-hover, grey);\n}\n\n:host([invalid]) {\n    border-color: indianred;\n}\n\n:host([invalid]:hover) {\n    border-color: indianred;\n}\n\n:host([loading])::after {\n    content: "";\n    position: absolute;\n    width: 12px;\n    height: 12px;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto 10px auto auto;\n    border: 3px solid darkgrey;\n    border-radius: 50%;\n    border-bottom-color: var(--he-input-clr-spinner, black);\n    animation: button-loading-spinner 1s ease infinite;\n}\n\n:host([ok])::after {\n    content: "";\n    position: absolute;\n    width: 10px;\n    height: 15px;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto 10px auto auto;\n    border: 3px solid transparent;\n    border-bottom-color: var(--he-input-clr-ok, black);\n    border-right-color: var(--he-input-clr-ok, black);\n    transform: rotate(45deg);\n}\n\n#inp-main {\n    outline: none;\n    background-color: inherit;\n    width: 100%;\n    font-size:inherit;\n    border-radius: inherit;\n    border: none;\n    padding: 0.3rem 0.4rem;\n    cursor: inherit;\n    color: inherit;\n}\n\n:host([readonly]:hover), :host([readonly]:focus),\n:host([disabled]:hover), :host([disabled]:focus) {\n    border-color: var(--he-input-clr-border-hover, lightgrey);\n}\n\n:host([readonly]), :host([disabled]) {\n    cursor: default;\n    color: hsl(from var(--he-input-clr, black) h s calc(l + 50))\n}\n\n@keyframes button-loading-spinner {\n    from {\n        transform: rotate(0turn);\n    }\n\n    to {\n        transform: rotate(1turn);\n    }\n}\n\n');class e extends HTMLElement{static formAssociated=!0;static observedAttributes=["pattern","required","report-validity","type","disabled","readonly","autocomplete","placeholder"];$input;internals;constructor(){super();let e=this.attachShadow({mode:"open"});this.$input=document.createElement("input"),this.$input.type="text",this.$input.autocomplete="off",this.$input.id="inp-main",e.append(this.$input),e.adoptedStyleSheets=[t],this.internals=this.attachInternals()}set disabled(t){t?(this.setAttribute("disabled",!0),this.internals.states.add("disabled"),this.internals.setFormValue(null)):(this.removeAttribute("disabled"),this.internals.states.delete("disabled"),this.internals.setFormValue(this.$input.value))}get disabled(){return null!=this.getAttribute("disabled")}set invalid(t){t?(this.setAttribute("invalid",!0),this.internals.states.add("invalid")):(this.removeAttribute("invalid"),this.internals.states.delete("invalid"))}get invalid(){return null!=this.getAttribute("invalid")}set name(t){t?this.setAttribute("name",t):this.removeAttribute("name")}get name(){return this.getAttribute("name")}set placeholder(t){t?this.setAttribute("placeholder",t):this.removeAttribute("placeholder")}get placeholder(){return this.getAttribute("placeholder")}set required(t){t?this.setAttribute("required",!0):this.removeAttribute("required")}get required(){return this.$input.required}set type(t){t?this.setAttribute("type",t):this.removeAttribute("type")}get type(){return this.getAttribute("type")}set value(t){this.$input.value=t,this.disabled||this.internals.setFormValue(t)}get value(){return""===this.$input.value?this.placeholder??"":this.$input.value}connectedCallback(){this.$input.onchange=()=>this.inputChangedCallback.bind(this)(),this.value=this.getAttribute("value"),this.value||(this.value=this.innerHTML)}attributeChangedCallback(t,e,i){switch(t){case"type":this.style.display="hidden"===i?"none":"";case"placeholder":""===this.value&&this.internals.setFormValue(i);default:null!=i?this.$input.setAttribute(t,i):this.$input.removeAttribute(t)}}checkValidity(){const t=this.$input.validity;t.valid?this.invalid=!1:this.invalid=!0;const e=this.getAttribute("report-invalid");if(e){console.assert(this.id&&""!==this.id,"The input cannot report its validity if it has no ID");const i="#"+this.id,n=document.querySelectorAll(e);for(const e of n){const n=e.getAttribute("he-input-invalid")??"";let r=new Set(n.split(" "));t.valid?r.delete(i):r.add(i),0!==r.size?e.setAttribute("he-input-invalid",Array.from(r).join(" ")):e.removeAttribute("he-input-invalid")}}return t.valid}focus(){this.$input.focus()}formResetCallback(){this.$input.value=""}inputChangedCallback(){!this.disabled&&this.checkValidity()&&this.internals.setFormValue(this.$input.value)}}customElements.get("he-input")||customElements.define("he-input",e);export{e as HeliumInput};
