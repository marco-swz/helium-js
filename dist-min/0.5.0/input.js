const t=new CSSStyleSheet;t.replaceSync(':host {\r\n    display: inline-flex;\r\n    position: relative;\r\n    border-radius: 3px;\r\n    background-color: whitesmoke;\r\n    width: 100%;\r\n    height: fit-content;\r\n    font-size: 14px;\r\n    border: 1px solid lightgrey;\r\n}\r\n\r\n:host(:hover), :host(:focus) {\r\n    border-color: var(--he-input-clr-border-hover, grey);\r\n}\r\n\r\n:host([invalid]) {\r\n    border-color: indianred;\r\n}\r\n\r\n:host([invalid]:hover) {\r\n    border-color: indianred;\r\n}\r\n\r\n:host([loading])::after {\r\n    content: "";\r\n    position: absolute;\r\n    width: 12px;\r\n    height: 12px;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    margin: auto 10px auto auto;\r\n    border: 3px solid darkgrey;\r\n    border-radius: 50%;\r\n    border-bottom-color: var(--he-input-clr-spinner, black);\r\n    animation: button-loading-spinner 1s ease infinite;\r\n}\r\n\r\n:host([ok])::after {\r\n    content: "";\r\n    position: absolute;\r\n    width: 10px;\r\n    height: 15px;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    margin: auto 10px auto auto;\r\n    border: 3px solid transparent;\r\n    border-bottom-color: var(--he-input-clr-ok, black);\r\n    border-right-color: var(--he-input-clr-ok, black);\r\n    transform: rotate(45deg);\r\n}\r\n\r\n#inp-main {\r\n    outline: none;\r\n    background-color: inherit;\r\n    width: inherit;\r\n    font-size:inherit;\r\n    border-radius: inherit;\r\n    border: none;\r\n    padding: 0.3rem 0.4rem;\r\n    cursor: inherit;\r\n}\r\n\r\n:host([readonly]:hover), :host([readonly]:focus),\r\n:host([disabled]:hover), :host([disabled]:focus) {\r\n    border-color: var(--he-input-clr-border-hover, lightgrey);\r\n}\r\n\r\n:host([readonly]), :host([disabled]) {\r\n    cursor: default\r\n}\r\n\r\n@keyframes button-loading-spinner {\r\n    from {\r\n        transform: rotate(0turn);\r\n    }\r\n\r\n    to {\r\n        transform: rotate(1turn);\r\n    }\r\n}\r\n\r\n');class r extends HTMLElement{static formAssociated=!0;static observedAttributes=["pattern","required","report-validity","type","disabled","readonly"];input;internals;constructor(){super();let r=this.attachShadow({mode:"open"});this.input=document.createElement("input"),this.input.type="text",this.input.autocomplete=!1,this.input.id="inp-main",r.append(this.input),r.adoptedStyleSheets=[t]}connectedCallback(){this.internals=this.attachInternals(),this.input.onchange=()=>this.inputChangedCallback.bind(this)(),this.value=this.innerHTML}focus(){this.input.focus()}checkValidity(){const t=this.input.validity;t.valid?this.removeAttribute("invalid"):this.setAttribute("invalid",!0);const r=this.getAttribute("report-invalid");if(r){console.assert(this.id&&""!==this.id,"The input cannot report its validity if it has no ID");const n="#"+this.id,e=document.querySelectorAll(r);for(const r of e){const e=r.getAttribute("input-invalid")??"";let i=new Set(e.split(" "));t.valid?i.delete(n):i.add(n),0!==i.size?r.setAttribute("input-invalid",Array.from(i).join(" ")):r.removeAttribute("input-invalid")}}return t.valid}formResetCallback(){this.input.value=""}set name(t){this.setAttribute("name",t)}get name(){return this.getAttribute("name")}set value(t){this.input.value=t,this.internals.setFormValue(t)}get value(){return this.input.value}attributeChangedCallback(t,r,n){"type"===t&&(this.style.display="hidden"===n?"none":""),n?this.input.setAttribute(t,n):this.input.removeAttribute(t)}inputChangedCallback(){this.checkValidity()&&this.internals.setFormValue(this.input.value)}}document.addEventListener("DOMContentLoaded",(function(){customElements.define("he-input",r)}));export{r as HeliumInput};
