const e=new CSSStyleSheet;e.replaceSync(":host {\n    --he-toggle-color: black;\n    --he-toggle-backgroundColor: white;\n    --he-toggle-outline-borderColor: lightgrey;\n    --he-toggle-checked-color: black;\n    --he-toggle-checked-backgroundColor: hsl(from var(--he-toggle-backgroundColor) h s calc(l - 10));\n    --he-toggle-height: 35px;\n    --he-toggle-minWidth: var(--he-toggle-height);\n    --he-toggle-cursor: pointer;\n    --bg-color: var(--he-toggle-backgroundColor);\n\n    background-color: var(--he-toggle-backgroundColor);\n    color: var(--he-toggle-color);\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 3px;\n    height: var(--he-toggle-height);\n    min-width: var(--he-toggle-minWidth);\n    cursor: var(--he-toggle-cursor);\n    font-weight: 600;\n    padding: 0 10px;\n}\n\n:host(:not(:disabled):hover) {\n    transition:\n        background-color 0.2s;\n    background-color: hsl(from var(--bg-color) h s calc(l - 5));\n}\n\n:host([checked]) {\n    --bg-color: var(--he-toggle-checked-backgroundColor);\n    transition:\n        color 0.2s,\n        background-color 0.2s;\n    color: var(--he-toggle-checked-color);\n    background-color: var(--he-toggle-checked-backgroundColor);\n}\n\n:host([variant=outline]) {\n    border: 1px solid var(--he-toggle-outline-borderColor);\n}\n");class t extends HTMLElement{static formAssociated=!0;static observedAttributes=["disabled","checked","name"];$slot;internals;constructor(){super();let t=this.attachShadow({mode:"open"});this.$slot=document.createElement("slot"),this.$slot.name="inner",t.append(this.$slot),t.adoptedStyleSheets=[e],this.internals=this.attachInternals()}set checked(e){e?(this.setAttribute("checked",""),this.internals.states.add("checked"),this.internals.setFormValue(this.value)):(this.removeAttribute("checked"),this.internals.states.delete("checked"),this.internals.setFormValue(null))}get checked(){return null!=this.getAttribute("checked")}set disabled(e){e?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get disabled(){return null!=this.getAttribute("disabled")}set name(e){e?this.setAttribute("name",e):this.removeAttribute("name")}get name(){return this.getAttribute("name")}set value(e){e?this.setAttribute("value",e):this.removeAttribute("value")}get value(){return this.getAttribute("value")}attributeChangedCallback(e,t,n){switch(e){case"checked":this.disabled||this.internals.setFormValue(n);break;case"disabled":null!=n?this.internals.setFormValue(null):this.internals.setFormValue(this.checked)}}checkValidity(){return!0}connectedCallback(){if(""!==this.innerHTML){let e=document.createElement("span");e.slot="inner",e.innerHTML=this.innerHTML,this.innerHTML="",this.append(e)}this.onclick=()=>this._clickCallback.bind(this)()}formResetCallback(){this.checked=!1}reset(){return this.formResetCallback(),this}_clickCallback(){if(!this.disabled){if(this.checked=!this.checked,null!=this.name){const e=this.internals.form;let t=null==e?document:e;for(let e of t.querySelectorAll(`he-toggle[name="${this.name}"]`))e!=this&&(e.checked=!1)}this.dispatchEvent(new Event("change",{bubbles:!0}))}}}customElements.get("he-toggle")||customElements.define("he-toggle",t);export{t as HeliumToggle};
