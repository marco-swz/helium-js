import{h as t,a as e}from"./utils-RA_86-hs.js";import"./popover-BtSr2gHM.js";const n=new CSSStyleSheet;n.replaceSync(':host {\n    --he-select-backgroundColor: whitesmoke;\n    --he-select-borderColor: lightgrey;\n    --he-select-borderWidth: 1px;\n    --he-select-borderRadius: 3px;\n    --he-select-hover-borderColor: grey;\n    --he-select-color: black;\n    --he-select-padding: 0.3rem 0.4rem;\n    --he-select-popover-borderRadius: 4px;\n    --he-select-popover-maxHeight: 300px;\n    --he-select-popover-maxWidth: 300px;\n    --he-select-popover-width: fit-content;\n    --he-select-popover-backgroundColor: white;\n    --he-select-option-hover-backgroundColor: whitesmoke;\n    --he-select-option-selected-backgroundColor: whitesmoke;\n    --he-select-after-margin: auto 4px auto auto;\n    --he-select-after-content: "â–¼";\n    --he-select-after-fontSize: 10px;\n    --he-select-disabled-color: hsl(from var(--he-select-color) h s calc(l + 50));\n\n    height: 1.6rem;\n    font-size: 14px;\n    min-width: 150px;\n    width: 150px;\n    display: inline-block;\n}\n\n:host([disabled]), \n:host([disabled])::slotted([slot=button]) {\n    pointer-events: none;\n    color: var(--he-select-disabled-color);\n}\n\n:host([variant="underline"]) {\n    #inp {\n        border-top: 0;\n        border-left: 0;\n        border-right: 0;\n        border-radius: 0;\n    }\n}\n\n#cont-button {\n    height: inherit;\n    width: inherit;\n}\n\n#inp {\n    position: relative;\n    background-color: var(--he-select-backgroundColor);\n    border-width: var(--he-select-borderWidth);\n    border-radius: var(--he-select-borderRadius);\n    border-color: var(--he-select-borderColor);\n    border-style: solid;\n    font-size: inherit;\n    width: 100%;\n    height: inherit;\n    min-width: inherit;\n    padding: var(--he-select-padding);\n    outline: none;\n    text-align: left;\n    padding-right: 25px;\n    text-wrap: nowrap;\n    color: inherit;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n#inp:hover {\n    transition:\n        border-color 0.2s;\n    cursor: pointer;\n    border-color: var(--he-select-hover-borderColor);\n}\n\n#inp::after {\n    content: var(--he-select-after-content);\n    position: absolute;\n    font-size: var(--he-select-after-fontSize);\n    width: fit-content;\n    height: fit-content;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    margin: var(--he-select-after-margin);\n}\n\n#popover {\n    border-radius: var(--he-select-popover-borderRadius);\n}\n\n#cont-options {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--he-select-popover-backgroundColor);\n    max-height: var(--he-select-popover-maxHeight);\n    width: var(--he-select-popover-width);\n    overflow: auto;\n    overscroll-behavior: contain;\n    user-select: none;\n}\n\nslot[name=option] {\n    display: inline-flex;\n    flex-direction: column;\n}\n\nslot[name=button] {\n    display: flex;\n    align-items: center;\n    height: 100%;\n}\n\n#cont-options option,\n::slotted(*) {\n    padding: 5px 10px;\n    border-radius: 3px;\n    text-align: left;\n    width: 100%;\n    width: -moz-available;          /* WebKit-based browsers will ignore this. */\n    width: -webkit-fill-available;  /* Mozilla-based browsers will ignore this. */\n    width: fill-available;\n    display: inline-block;\n    text-overflow: ellipsis;\n    overflow: hidden;\n}\n\n#cont-options option[selected]::before,\n::slotted([slot=option][selected])::before {\n    font-family: "Font Awesome 5 Pro";\n    content: "\\f00c";\n    font-weight: 600;\n    margin-right: 6px;\n    color: steelblue;\n}\n\n#cont-options:not(:hover) option[highlighted],\n#cont-options:not(:hover) ::slotted([slot=option][highlighted]) {\n    background-color: var(--he-select-option-selected-backgroundColor);\n}\n\n#cont-options option:hover:not(:disabled),\n::slotted([slot=option]:hover:not(:disabled))\n{\n    background-color: var(--he-select-option-hover-backgroundColor);\n    cursor: pointer;\n}\n\n#filter {\n    width: 100%;\n    width: -moz-available;          /* WebKit-based browsers will ignore this. */\n    width: -webkit-fill-available;  /* Mozilla-based browsers will ignore this. */\n    width: fill-available;\n    margin: 3px;\n}\n\n:host([filter="inline"]) {\n    #filter {\n        --he-input-padding: var(--he-select-padding);\n        background-color: var(--he-select-backgroundColor);\n        border-width: var(--he-select-borderWidth);\n        border-radius: var(--he-select-borderRadius);\n        border-color: var(--he-select-borderColor);\n        border-style: solid;\n        font-size: inherit;\n        width: 100%;\n        height: inherit;\n        margin: 0;\n        min-width: inherit;\n        outline: none;\n        text-align: left;\n        text-wrap: nowrap;\n        color: inherit;\n    }\n}\n\n');class i extends HTMLElement{static formAssociated=!0;static observedAttributes=["open","filter","disabled"];$popover;$popoverContent;$filter;$options;$selection=null;$button;$contButton;internals;_filterTimeout=0;_handleClickDocument;constructor(){super();let t=this.attachShadow({mode:"open"});this.internals=this.attachInternals(),this.$contButton=document.createElement("div"),this.$contButton.id="cont-button",t.append(this.$contButton),this.$popover=document.createElement("he-popover"),this.$popover.id="popover",this.$popover.dismiss="manual",this.$popover.$anchor=this.$contButton,this.$popoverContent=document.createElement("div"),this.$popoverContent.id="popover-content",this.$popoverContent.slot="content",this.$popover.append(this.$popoverContent),this.$filter=document.createElement("he-input"),this.$filter.id="filter",this.$filter.style.display="none",this.$filter.oninput=t=>this._handleChangeFilter.bind(this)(t),this.$button=document.createElement("button"),this.$button.id="inp",this.$button.onclick=()=>{this.open=!0},this.$contButton.append(this.$button),this.$options=document.createElement("div"),this.$options.id="cont-options",this.$popoverContent.append(this.$options),this.onkeydown=t=>this._handleKeydown(t),t.append(this.$popover),t.adoptedStyleSheets=[n]}set disabled(t){t?this.setAttribute("disabled",!0):this.removeAttribute("disabled")}get disabled(){return null!==this.getAttribute("disabled")}set filter(t){t?this.setAttribute("filter",!0):this.removeAttribute("filter")}get filter(){return null!==this.getAttribute("filter")}set name(t){t?this.setAttribute("name",t):this.removeAttribute("name")}get name(){return this.getAttribute("name")}set open(t){t?this.setAttribute("open",""):this.removeAttribute("open")}get open(){return null!==this.getAttribute("open")}set value(t){if(t){if(this.hasAttribute("slotted")){let e=this.$options.children[0].assignedNodes().filter((e=>e.getAttribute("value")===t))[0];if(null==e)throw new Error("No option found with provided value!");return void this._select(e)}const e=this.$options.querySelector(`[value="${t}"]`);if(null==e)throw new Error("No option found with provided value!");this._select(e)}}get value(){return this.$selection?this.$selection.value??this.$selection.getAttribute("value"):""}attributeChangedCallback(t,e,n){switch(t){case"open":null!=n?this._showPopover():this._hidePopover();break;case"filter":this.$filter.style.display=null==n||"false"===n?"none":"";break;case"disabled":null!=n?this.internals.setFormValue(null):this.internals.setFormValue(this.value)}}checkValidity(){return!0}connectedCallback(){if("inline"===this.getAttribute("filter"))this.$contButton.append(this.$filter),this.$filter.style.display="none";else this.$popoverContent.prepend(this.$filter);if(this.hasAttribute("slotted")){let t=document.createElement("slot");t.name="option",t.addEventListener("slotchange",(t=>this._handleSlotchange(t))),this.$options.append(t),t=document.createElement("slot"),t.name="button",this.$button.append(t)}else for(let t of this.querySelectorAll("option"))t.onclick=t=>this._handleClickOption.bind(this)(t),this.$options.append(t);this.select(0),this.hasAttribute("open")&&(this.open=!0)}formResetCallback(){let t=null;for(const e of this.getOptions())if("none"!==e.style.display&&!e.disabled){t=e;break}if(null==t)return this.$button.innerHTML="",void this.internals.setFormValue(null);this._select(t)}getOptions(){return this.hasAttribute("slotted")?this.$options.children[0].assignedNodes():this.$options.children}hideOptions(t=null){let e=null;for(let n of this.getOptions())null==t||t.includes(n.value)?n.style.display="none":(n.style.display="",null==e&&(e=n));return null==e?(this.$button.innerHTML="",this.internals.setFormValue(null)):this._select(e),this}nextOption(t=!1){this._moveOption(t,1)}_moveOption(t,e){let n=t?this.$highlight:this.$selection,i=this.getOptions();if(0===i.length)return;if(!n)return void(t?this._highlight(i[0]):this._select(i[0]));let o=Array.prototype.indexOf.call(i,n),s=n;for(;i.length>1;)if(o+=e,s=i[o],null!=s){if(n.isSameNode(s))return;if("none"!==s.style.display)break}else o=e>0?-1:i.length;t?this._highlight(s):this._select(s)}prevOption(t=!1){this._moveOption(t,-1)}replaceOptions(t,e=null){this.hasAttribute("slotted")?this.innerHTML="":this.$options.innerHTML="",e=e??{};const n=this.value;let i=null;for(const o of t){let t=document.createElement("option");t.value=o,t.innerHTML=e[o]??o,this.hasAttribute("slotted")?(t.slot="option",this.append(t)):(this.$options.append(t),t.onclick=t=>this._handleClickOption.bind(this)(t)),n===o&&(i=t)}return null!=i?this._select(i):this.select(0),this}showOptions(t=null){let e=null;for(let n of this.getOptions())(null==t||t.includes(n.value))&&(n.style.display="",null==e&&(e=n));return e=this.$selection??e,null!=e&&this._select(e),this}select(t){let e=this.getOptions();if(0===e.length&&0===t)return;const n=e[t];console.assert(null!=n,`No option with the given index ${t}!`),this._select(n)}toggle(){return this.$popover.togglePopover(),this}_handleChangeFilter(){window.clearTimeout(this._filterTimeout),this._filterTimeout=setTimeout((()=>{let t=this.$filter.value;t&&t.toLowerCase();let e=null,n=this.getOptions();for(const i of n){let n=i.value??i.getAttribute("value");0===t.length||""!==n&&i.innerText.toLowerCase().includes(t)?(null==e&&(e=i),i.style.display=""):i.style.display="none"}this._highlight(e)}),250)}_handleClickOption(t){this.open=!1;const e=t.currentTarget;this._select(e),this.dispatchEvent(new CustomEvent("change"))}_handleKeydown(t){switch(t.key){case"ArrowDown":t.preventDefault(),this.nextOption(!0);break;case"ArrowUp":t.preventDefault(),this.prevOption(!0);break;case"Enter":this.open?(t.preventDefault(),this._select(this.$highlight),this._hidePopover(),this.dispatchEvent(new CustomEvent("change"))):this.open=!0;break;case"Escape":t.preventDefault(),this._hidePopover()}}_handleSlotchange(){let t=null,e=!1;for(let n of this.$options.children[0].assignedNodes())n.onclick=t=>this._handleClickOption.bind(this)(t),null==t&&(t=n),n.isSameNode(this.$selection)&&(e=!0);e||this._select(t)}_hidePopover(){"inline"===this.getAttribute("filter")&&(this.$button.style.display="",this.$filter.style.display="none"),this.$filter.value="",this.$popover.hidePopover(),document.removeEventListener("click",this._handleClickDocument)}_highlight(t){this.$highlight&&this.$highlight.removeAttribute("highlighted"),null!=t&&(this.$highlight=t,this.$highlight.setAttribute("highlighted",""))}_showPopover(){"inline"===this.getAttribute("filter")&&(this.$button.style.display="none",this.$filter.style.display="");let n="bottom-left";t(this)<this.$popover.offsetHeight+20&&(n="top-left"),this._handleClickDocument=e([this.$popoverContent,this.$contButton],(()=>{this.open=!1})),this.$popover.setAttribute("position",this.getAttribute("position")??n),this.$filter.value="",this.showOptions(),this.$popover.style.visibility="hidden",this.$popover.showPopover();let i=this.$options.getBoundingClientRect().width,o=this.$contButton.getBoundingClientRect().width;o>i&&(this.$options.style.width=o+"px"),this.$popover.style.visibility="",this._highlight(this.$selection),this.$filter.focus()}_select(t){if(this.$selection&&this.$selection.removeAttribute("selected"),null==t)return this.$selection=null,this.internals.setFormValue(null),void(this.$filter.value="");if(this.hasAttribute("slotted")){let e=t.cloneNode();e.innerHTML=t.innerHTML,e.slot="button";let n=this.querySelector('[slot="button"]');n&&n.remove(),this.append(e)}else this.$button.innerHTML=t.innerHTML;this.$selection=t,this.$selection.setAttribute("selected",""),this.disabled||this.internals.setFormValue(this.value)}}customElements.get("he-select")||customElements.define("he-select",i);export{i as HeliumSelect};
