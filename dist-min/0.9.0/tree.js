const e=new CSSStyleSheet;e.replaceSync('\n.cont-children {\n    padding-left: 20px;\n    position: relative;\n    display: block;\n\n    &::before {\n        content: \'\';\n        width: 0;\n        height: 100%;\n        position: absolute;\n        border: 1px solid lightgrey;\n        top: 0;\n        left: 11px;\n    }\n\n    /* & .list-elem::before { */\n        /* content: "|"; */\n        /* padding-right: 5px; */\n    /* } */\n}\n\n.list-elem {\n    padding: 8px 10px;\n    cursor: pointer;\n\n    &:hover {\n        background-color: whitesmoke;\n    }\n}\n\ndiv[type="root"] {\n    & > .list-elem::before {\n        transition: transform 0.1s;\n        font-family: "Font Awesome 5 Pro";\n        content: "\\f105";\n        color: grey;\n        padding-right: 5px;\n        display: inline-block;\n        transform: rotate(90deg) translate(3px, 3px);\n    }\n}\n\ndiv[closed] {\n    & > .cont-children {\n        display: none;\n    }\n\n    & > .list-elem::before {\n        transition: transform 0.1s;\n        transform: rotate(0deg) translate(0, 0);\n    }\n}\n');class t extends HTMLElement{static observedAttributes=[];$contItems;constructor(){super();let t=this.attachShadow({mode:"open"});this.$contItems=document.createElement("div"),this.$contItems.id="cont-items",t.append(this.$contItems),t.adoptedStyleSheets=[e]}attributeChangedCallback(e,t,n){}connectedCallback(){let e=[];for(let t of Array.from(this.children)){let n=this._renderLeaf(t);this.$contItems.append(n),e.push(n)}for(let t of e){const e=t.getAttribute("parent");if(null==e){this.$contItems.append(t);continue}const n=this.$contItems.querySelector("#"+e);if(null==n)throw new Error("No parent found with selector #"+e);if("root"!==n.getAttribute("type")){n.setAttribute("type","root");let e=document.createElement("div");e.classList.add("cont-children"),e.append(t),n.append(e),n.children[0].addEventListener("click",(()=>this._clickRootCallback.bind(this)(n)))}else n.children[1].append(t)}}filter(e){for(const t of this.$contItems.children)this._filterRecursive(t,e)}_filterRecursive(e,t){let n=null==t;if("root"===e.getAttribute("type"))for(const i of e.children[1].children)n||=this._filterRecursive(i,t);return n||=e.children[0].innerHTML.includes(t),n?e.style.display="":(e.style.display="none",e.setAttribute("closed","true")),n}_clickRootCallback(e){this._toggleChildren(e)}_toggleChildren(e){e.getAttribute("closed")?this._showChildren(e):this._hideChildren(e)}_hideChildren(e){e.setAttribute("closed","true")}_showChildren(e){e.removeAttribute("closed")}_renderLeaf(e){let t=document.createElement("div");const n=e.getAttribute("parent");return null!=n&&t.setAttribute("parent",n),t.id=e.id,t.classList.add("cont-elem"),e.id="",e.classList.add("list-elem"),t.setAttribute("type","leaf"),t.append(e),t}}customElements.get("he-tree")||customElements.define("he-tree",t);export{t as HeliumTree};
